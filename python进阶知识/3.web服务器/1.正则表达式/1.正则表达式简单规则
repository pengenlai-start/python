"""
正则表达式

import re

ret = re.match(正则表达式,需要处理的字符串)
ret.group() 得到匹配的数据

单字符匹配

字符                                      功能
.                                        匹配任意一个字符除了 '\n'
[]                                       匹配 [] 中列举的字符 [1-3] <=> 1到3
\d                                       匹配数字，即 0-9
\D                                       匹配非数字，即不是数字
\s                                       匹配空白字符，即空格、tab键
\S                                       匹配非空白
\w                                       匹配单词字符，即 a-z、 A-Z、 0-9、 _
\W                                       匹配非单词字符
\s\d{11}    就近原则 \d 有 11 位
\s\d{1,3}   \d 是 1到3 位均可

eg.
import re

str1 = '''1 3

         2 4'''  # 三个单（双）引号之间是字符串
res = re.match(r'.*', str1, re.S).group()  # 若没有参数 re.S 结果为 1 3 ; 若有参数 re.S  结果为 1 3
#                                                                                                2 4
print(res)

多字符匹配

字符                                      功能
*                                        匹配前一个字符出现 0 次或无限次，即可有可无
+                                        匹配前一个字符出现 1 次或无限次，即至少有一次
?                                        匹配前一个字符出现 1 次或 0 次，即要么有一次要么没有
{m}                                      匹配前一个字符出现 m 次
{m, n}                                   匹配前一个字符出现从 m 到 n 次

匹配开头结尾

字符                                      功能
^                                        匹配字符串开头
$                                        匹配字符串结尾

分组

字符                                      功能
|                                        匹配左右任意一个表达式
(ab)                                     将括号中字符作为一个分组
\num                                     引用分组 num 匹配到的字符串(即引用 分组 num 匹配到的值)， 分组初始序号从 1 开始
(?P<name>)                               分组起别名
(?P=name)                                引用别名为 name 的组匹配到的字符串

如果正则表达式需要用到某些特殊的字符：
.   ？   等 需要对它们进行转义
eg.
\.

"""


